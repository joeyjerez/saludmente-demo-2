import React, { useState, useEffect, useRef } from 'react';
import { View, StyleSheet, ScrollView, KeyboardAvoidingView, Platform } from 'react-native';
import { Card, Text, TextInput, Button, Avatar } from 'react-native-paper';

export default function ChatbotScreen() {
  const [messages, setMessages] = useState([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef(null);

  const predefinedResponses = {
    greetings: [
      'Hola, estoy aquí para acompañarte. ¿Cómo te sientes hoy?',
      '¡Hola! Me alegra que hayas decidido conversar conmigo. ¿En qué puedo ayudarte?',
      'Bienvenido/a. Este es un espacio seguro para ti. ¿Qué tienes en mente?'
    ],
    anxiety: [
      'Entiendo que sientes ansiedad. Es completamente normal y no estás solo/a en esto. ¿Puedes contarme qué situación específica te genera ansiedad?',
      'La ansiedad puede ser abrumadora, pero recuerda que es temporal. ¿Has probado alguna técnica de respiración? Te puedo guiar en una.',
      'Siento que estés pasando por un momento difícil. La ansiedad es una respuesta natural del cuerpo. ¿Te gustaría hablar sobre lo que está pasando?'
    ],
    breathing: [
      'Excelente idea. Vamos a hacer un ejercicio simple: Inhala por 4 segundos, mantén por 4, y exhala por 6. ¿Estás listo/a?',
      'La respiración consciente es muy efectiva. Intenta inhalar lentamente por la nariz, pausa, y exhala despacio por la boca. Hazlo conmigo.',
      '¿Te parece si practicamos la técnica 4-7-8? Inhala por 4, mantén por 7, exhala por 8. Es muy relajante.'
    ],
    sad: [
      'Lamento que te sientas triste. Es válido sentir tristeza, es parte de ser humano. ¿Te gustaría contarme qué te tiene así?',
      'La tristeza puede ser pesada, pero no eres débil por sentirla. ¿Hay algo específico que haya desencadenado estos sentimientos?',
      'Te acompaño en este momento. A veces hablar sobre lo que nos entristece puede ayudar a procesarlo mejor.'
    ],
    stress: [
      'El estrés puede ser agotador. ¿Has identificado qué está causando principalmente tu estrés?',
      'Entiendo que te sientes abrumado/a. El estrés es la forma en que nuestro cuerpo responde a las demandas. ¿Qué te está presionando más?',
      'Es importante reconocer cuando estamos estresados. ¿Te gustaría explorar algunas estrategias para manejarlo mejor?'
    ],
    support: [
      'Estoy aquí para ti. No tienes que enfrentar esto solo/a.',
      'Eres más fuerte de lo que crees. Cada día que sigues adelante es una prueba de tu fortaleza.',
      'Es valioso que busques apoyo. Cuidar tu salud mental es tan importante como cuidar tu salud física.',
      'Recuerda que está bien no estar bien todo el tiempo. Eres humano/a y mereces compasión, especialmente de ti mismo/a.'
    ],
    encouragement: [
      'Has tomado el primer paso al reconocer cómo te sientes. Eso requiere valentía.',
      'Cada pequeño paso cuenta. Celebra tus logros, por pequeños que parezcan.',
      'Estás haciendo lo mejor que puedes con los recursos que tienes ahora, y eso es suficiente.',
      'Tu bienestar importa. Gracias por priorizarte y buscar ayuda.'
    ]
  };

  const quickResponses = [
    'Me siento ansioso/a',
    'Quiero hacer ejercicios de respiración',
    'Me siento triste',
    'Estoy estresado/a',
    'Necesito apoyo',
    'Cuéntame algo positivo'
  ];

  useEffect(() => {
    // Mensaje inicial
    const initialMessage = {
      id: Date.now(),
      text: '¡Hola! Soy tu asistente empático. Estoy aquí para escucharte y acompañarte. ¿Cómo puedo ayudarte hoy?',
      isBot: true,
      timestamp: new Date()
    };
    setMessages([initialMessage]);
  }, []);

  useEffect(() => {
    // Auto scroll to bottom when new messages arrive
    setTimeout(() => {
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }, 100);
  }, [messages]);

  const getResponse = (userMessage) => {
    const message = userMessage.toLowerCase();
    
    // Análisis de patrones en el mensaje
    if (message.includes('ansi') || message.includes('nervios') || message.includes('miedo') || message.includes('preocup')) {
      return predefinedResponses.anxiety[Math.floor(Math.random() * predefinedResponses.anxiety.length)];
    }
    
    if (message.includes('respir') || message.includes('calmar') || message.includes('relaj')) {
      return predefinedResponses.breathing[Math.floor(Math.random() * predefinedResponses.breathing.length)];
    }
    
    if (message.includes('trist') || message.includes('deprim') || message.includes('llor')) {
      return predefinedResponses.sad[Math.floor(Math.random() * predefinedResponses.sad.length)];
    }
    
    if (message.includes('estr') || message.includes('agobiad') || message.includes('abrumad') || message.includes('presión')) {
      return predefinedResponses.stress[Math.floor(Math.random() * predefinedResponses.stress.length)];
    }
    
    if (message.includes('ayuda') || message.includes('apoyo') || message.includes('acompañ')) {
      return predefinedResponses.support[Math.floor(Math.random() * predefinedResponses.support.length)];
    }
    
    if (message.includes('positivo') || message.includes('bien') || message.includes('mejor') || message.includes('gracias')) {
      return predefinedResponses.encouragement[Math.floor(Math.random() * predefinedResponses.encouragement.length)];
    }
    
    if (message.includes('hola') || message.includes('buenas') || message.includes('salud')) {
      return predefinedResponses.greetings[Math.floor(Math.random() * predefinedResponses.greetings.length)];
    }
    
    // Respuesta por defecto
    return 'Te escucho y entiendo que estás pasando por algo importante. ¿Puedes contarme un poco más sobre cómo te sientes? Estoy aquí para acompañarte.';
  };

  const sendMessage = (messageText = inputText) => {
    if (!messageText.trim()) return;

    // Agregar mensaje del usuario
    const userMessage = {
      id: Date.now(),
      text: messageText,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);

    // Simular que el bot está escribiendo
    setTimeout(() => {
      const botResponse = {
        id: Date.now() + 1,
        text: getResponse(messageText),
        isBot: true,
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000); // Entre 1-2 segundos
  };

  const sendQuickResponse = (response) => {
    sendMessage(response);
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('es-ES', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <ScrollView 
        ref={scrollViewRef}
        style={styles.messagesContainer}
        contentContainerStyle={{ flexGrow: 1, paddingBottom: 10 }}
        showsVerticalScrollIndicator={false}
        keyboardShouldPersistTaps="handled"
        bounces={false}
        scrollEventThrottle={16}
        nestedScrollEnabled={true}
        overScrollMode="always"
        alwaysBounceVertical={false}
      >
        {messages.map((message) => (
          <View
            key={message.id}
            style={[
              styles.messageWrapper,
              message.isBot ? styles.botMessageWrapper : styles.userMessageWrapper
            ]}
          >
            {message.isBot && (
              <Avatar.Icon
                size={32}
                icon="robot"
                style={styles.botAvatar}
              />
            )}
            <Card
              style={[
                styles.messageCard,
                message.isBot ? styles.botMessage : styles.userMessage
              ]}
            >
              <Card.Content style={styles.messageContent}>
                <Text style={[
                  styles.messageText,
                  message.isBot ? styles.botText : styles.userText
                ]}>
                  {message.text}
                </Text>
                <Text style={[
                  styles.timestamp,
                  message.isBot ? styles.botTimestamp : styles.userTimestamp
                ]}>
                  {formatTime(message.timestamp)}
                </Text>
              </Card.Content>
            </Card>
          </View>
        ))}
        
        {isTyping && (
          <View style={[styles.messageWrapper, styles.botMessageWrapper]}>
            <Avatar.Icon
              size={32}
              icon="robot"
              style={styles.botAvatar}
            />
            <Card style={[styles.messageCard, styles.botMessage]}>
              <Card.Content style={styles.messageContent}>
                <Text style={styles.typingText}>Escribiendo...</Text>
              </Card.Content>
            </Card>
          </View>
        )}
      </ScrollView>

      <View style={styles.quickResponsesContainer}>
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={{ paddingHorizontal: 5 }}
          bounces={false}
          scrollEventThrottle={16}
          nestedScrollEnabled={true}
        >
          {quickResponses.map((response, index) => (
            <Button
              key={index}
              mode="outlined"
              onPress={() => sendQuickResponse(response)}
              style={styles.quickResponseButton}
              compact
            >
              {response}
            </Button>
          ))}
        </ScrollView>
      </View>

      <View style={styles.inputContainer}>
        <TextInput
          mode="outlined"
          placeholder="Escribe tu mensaje..."
          value={inputText}
          onChangeText={setInputText}
          style={styles.textInput}
          multiline
          onSubmitEditing={() => sendMessage()}
        />
        <Button
          mode="contained"
          onPress={() => sendMessage()}
          disabled={!inputText.trim()}
          style={styles.sendButton}
          icon="send"
        >
          Enviar
        </Button>
      </View>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  messagesContainer: {
    flexGrow: 1,
    padding: 10,
  },
  messageWrapper: {
    flexDirection: 'row',
    marginVertical: 4,
    alignItems: 'flex-end',
  },
  botMessageWrapper: {
    justifyContent: 'flex-start',
  },
  userMessageWrapper: {
    justifyContent: 'flex-end',
  },
  botAvatar: {
    marginRight: 8,
    backgroundColor: '#4ECDC4',
  },
  messageCard: {
    maxWidth: '80%',
    elevation: 2,
  },
  botMessage: {
    backgroundColor: '#fff',
  },
  userMessage: {
    backgroundColor: '#4A90E2',
  },
  messageContent: {
    paddingVertical: 8,
    paddingHorizontal: 12,
  },
  messageText: {
    fontSize: 16,
    lineHeight: 22,
  },
  botText: {
    color: '#2c3e50',
  },
  userText: {
    color: '#fff',
  },
  timestamp: {
    fontSize: 11,
    marginTop: 4,
  },
  botTimestamp: {
    color: '#7f8c8d',
  },
  userTimestamp: {
    color: '#ecf0f1',
  },
  typingText: {
    color: '#7f8c8d',
    fontStyle: 'italic',
  },
  quickResponsesContainer: {
    backgroundColor: '#fff',
    paddingVertical: 10,
    paddingHorizontal: 5,
    borderTopWidth: 1,
    borderTopColor: '#e0e0e0',
  },
  quickResponseButton: {
    marginHorizontal: 4,
    borderColor: '#4ECDC4',
  },
  inputContainer: {
    flexDirection: 'row',
    padding: 10,
    backgroundColor: '#fff',
    alignItems: 'flex-end',
  },
  textInput: {
    flex: 1,
    marginRight: 10,
    maxHeight: 100,
  },
  sendButton: {
    backgroundColor: '#4A90E2',
  },
});