import React, { useState, useEffect } from 'react';
import { View, StyleSheet, ScrollView, Alert } from 'react-native';
import { Card, Title, Text, Button, ProgressBar } from 'react-native-paper';

export default function RelaxScreen() {
  const [activeExercise, setActiveExercise] = useState(null);
  const [currentStep, setCurrentStep] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [timer, setTimer] = useState(0);

  const exercises = [
    {
      id: 1,
      title: 'Respiraci√≥n 4-7-8',
      description: 'T√©cnica de respiraci√≥n para relajaci√≥n profunda',
      duration: '5 minutos',
      icon: 'ü´Å',
      color: '#96CEB4',
      steps: [
        { text: 'Si√©ntate c√≥modamente con la espalda recta', duration: 5 },
        { text: 'Inhala por la nariz durante 4 segundos', duration: 4 },
        { text: 'Ret√©n la respiraci√≥n por 7 segundos', duration: 7 },
        { text: 'Exhala por la boca durante 8 segundos', duration: 8 },
        { text: 'Repite el ciclo 4 veces m√°s', duration: 76 },
        { text: '¬°Excelente! Has completado el ejercicio', duration: 5 }
      ]
    },
    {
      id: 2,
      title: 'Relajaci√≥n Progresiva',
      description: 'Libera la tensi√≥n de todo tu cuerpo',
      duration: '8 minutos',
      icon: 'üßò‚Äç‚ôÄÔ∏è',
      color: '#4ECDC4',
      steps: [
        { text: 'Acu√©state o si√©ntate c√≥modamente', duration: 10 },
        { text: 'Cierra los ojos y respira profundamente', duration: 10 },
        { text: 'Tensa los m√∫sculos de los pies por 5 segundos, luego relaja', duration: 15 },
        { text: 'Tensa las pantorrillas, luego relaja completamente', duration: 15 },
        { text: 'Contin√∫a con los muslos, tensiona y relaja', duration: 15 },
        { text: 'Tensa el abdomen, mant√©n y luego relaja', duration: 15 },
        { text: 'Tensa los brazos y hombros, luego libera la tensi√≥n', duration: 15 },
        { text: 'Finalmente, tensa el rostro y luego rel√°jalo completamente', duration: 15 },
        { text: 'Respira profundamente y disfruta la relajaci√≥n total', duration: 20 },
        { text: '¬°Perfecto! Tu cuerpo est√° completamente relajado', duration: 5 }
      ]
    },
    {
      id: 3,
      title: 'Mindfulness B√°sico',
      description: 'Conecta con el momento presente',
      duration: '10 minutos',
      icon: 'üå∏',
      color: '#FF6B6B',
      steps: [
        { text: 'Encuentra una posici√≥n c√≥moda', duration: 10 },
        { text: 'Cierra los ojos suavemente', duration: 5 },
        { text: 'Observa tu respiraci√≥n natural sin cambiarla', duration: 60 },
        { text: 'Nota las sensaciones en tu cuerpo', duration: 60 },
        { text: 'Escucha los sonidos a tu alrededor sin juzgar', duration: 60 },
        { text: 'Si tu mente divaga, regresa gentilmente a la respiraci√≥n', duration: 120 },
        { text: 'Mant√©n esta atenci√≥n plena por unos minutos m√°s', duration: 180 },
        { text: 'Lentamente abre los ojos cuando est√©s listo', duration: 10 },
        { text: '¬°Excelente pr√°ctica de mindfulness!', duration: 5 }
      ]
    },
    {
      id: 4,
      title: 'Visualizaci√≥n Guiada',
      description: 'Imagina un lugar de paz y tranquilidad',
      duration: '6 minutos',
      icon: 'üèûÔ∏è',
      color: '#45B7D1',
      steps: [
        { text: 'Cierra los ojos y respira profundamente', duration: 10 },
        { text: 'Imagina que est√°s en una hermosa playa tropical', duration: 30 },
        { text: 'Siente la arena c√°lida bajo tus pies', duration: 30 },
        { text: 'Escucha el sonido relajante de las olas', duration: 30 },
        { text: 'Siente la brisa suave acariciando tu piel', duration: 30 },
        { text: 'Observa el cielo azul y las nubes blancas', duration: 30 },
        { text: 'Respira el aire fresco y salado del mar', duration: 30 },
        { text: 'Perm√≠tete sentir una paz profunda y tranquilidad', duration: 60 },
        { text: 'Lleva esta sensaci√≥n de calma contigo', duration: 30 },
        { text: 'Cuando est√©s listo, regresa al momento presente', duration: 10 }
      ]
    }
  ];

  useEffect(() => {
    let interval = null;
    if (isRunning && activeExercise) {
      interval = setInterval(() => {
        setTimer(timer => {
          const currentStepDuration = activeExercise.steps[currentStep]?.duration || 0;
          if (timer >= currentStepDuration) {
            const nextStep = currentStep + 1;
            if (nextStep < activeExercise.steps.length) {
              setCurrentStep(nextStep);
              return 0;
            } else {
              setIsRunning(false);
              setActiveExercise(null);
              setCurrentStep(0);
              Alert.alert('¬°Completado!', 'Has terminado el ejercicio de relajaci√≥n. ¬°Bien hecho!');
              return 0;
            }
          }
          return timer + 1;
        });
      }, 1000);
    } else if (!isRunning) {
      clearInterval(interval);
    }
    return () => clearInterval(interval);
  }, [isRunning, timer, currentStep, activeExercise]);

  const startExercise = (exercise) => {
    setActiveExercise(exercise);
    setCurrentStep(0);
    setTimer(0);
    setIsRunning(true);
  };

  const pauseExercise = () => {
    setIsRunning(false);
  };

  const resumeExercise = () => {
    setIsRunning(true);
  };

  const stopExercise = () => {
    setIsRunning(false);
    setActiveExercise(null);
    setCurrentStep(0);
    setTimer(0);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (activeExercise) {
    const currentStepData = activeExercise.steps[currentStep];
    const progress = currentStep / activeExercise.steps.length;
    const remainingTime = currentStepData ? currentStepData.duration - timer : 0;

    return (
      <View style={styles.exerciseContainer}>
        <Card style={[styles.exerciseCard, { borderColor: activeExercise.color }]}>
          <Card.Content>
            <View style={styles.exerciseHeader}>
              <Text style={styles.exerciseIcon}>{activeExercise.icon}</Text>
              <Title style={styles.exerciseTitle}>{activeExercise.title}</Title>
            </View>

            <View style={styles.progressSection}>
              <Text style={styles.stepCounter}>
                Paso {currentStep + 1} de {activeExercise.steps.length}
              </Text>
              <ProgressBar 
                progress={progress} 
                color={activeExercise.color} 
                style={styles.progressBar}
              />
            </View>

            <View style={styles.instructionSection}>
              <Text style={styles.instruction}>
                {currentStepData?.text}
              </Text>
              <Text style={styles.timeRemaining}>
                Tiempo restante: {formatTime(remainingTime)}
              </Text>
            </View>

            <View style={styles.controlButtons}>
              {isRunning ? (
                <Button 
                  mode="contained" 
                  onPress={pauseExercise}
                  style={[styles.controlButton, { backgroundColor: '#e74c3c' }]}
                  icon="pause"
                >
                  Pausar
                </Button>
              ) : (
                <Button 
                  mode="contained" 
                  onPress={resumeExercise}
                  style={[styles.controlButton, { backgroundColor: activeExercise.color }]}
                  icon="play"
                >
                  Continuar
                </Button>
              )}
              <Button 
                mode="outlined" 
                onPress={stopExercise}
                style={styles.controlButton}
                icon="stop"
              >
                Detener
              </Button>
            </View>
          </Card.Content>
        </Card>
      </View>
    );
  }

  return (
    <ScrollView 
      style={styles.scrollView}
      contentContainerStyle={{ flexGrow: 1, paddingBottom: 20 }}
      showsVerticalScrollIndicator={false}
      bounces={false}
      scrollEventThrottle={16}
      nestedScrollEnabled={true}
      overScrollMode="always"
      alwaysBounceVertical={false}
    >
      <View style={styles.header}>
        <Title style={styles.headerTitle}>Ejercicios de Relajaci√≥n</Title>
        <Text style={styles.headerSubtitle}>
          T√©cnicas guiadas para reducir el estr√©s y encontrar la calma
        </Text>
      </View>

      <View style={styles.exercisesList}>
        {exercises.map((exercise) => (
          <Card key={exercise.id} style={[styles.card, { borderLeftColor: exercise.color }]}>
            <Card.Content>
              <View style={styles.cardHeader}>
                <View style={styles.cardTitleContainer}>
                  <Text style={styles.exerciseIcon}>{exercise.icon}</Text>
                  <View style={styles.cardTitleText}>
                    <Title style={styles.cardTitle}>{exercise.title}</Title>
                    <Text style={styles.duration}>‚è±Ô∏è {exercise.duration}</Text>
                  </View>
                </View>
              </View>
              <Text style={styles.description}>{exercise.description}</Text>
              <Button
                mode="contained"
                onPress={() => startExercise(exercise)}
                style={[styles.startButton, { backgroundColor: exercise.color }]}
                icon="play"
              >
                Comenzar
              </Button>
            </Card.Content>
          </Card>
        ))}
      </View>

      <View style={styles.tips}>
        <Card style={styles.tipsCard}>
          <Card.Content>
            <Title style={styles.tipsTitle}>üí° Consejos para una mejor experiencia</Title>
            <Text style={styles.tipsText}>
              ‚Ä¢ Busca un lugar tranquilo y sin distracciones{'\n'}
              ‚Ä¢ Usa auriculares si es necesario{'\n'}
              ‚Ä¢ No te presiones, cada pr√°ctica es diferente{'\n'}
              ‚Ä¢ La constancia es m√°s importante que la perfecci√≥n{'\n'}
              ‚Ä¢ Practica cuando te sientas estresado o ansioso
            </Text>
          </Card.Content>
        </Card>
      </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flexGrow: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    backgroundColor: '#fff',
    padding: 20,
    marginBottom: 10,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#2c3e50',
    textAlign: 'center',
  },
  headerSubtitle: {
    fontSize: 16,
    color: '#7f8c8d',
    textAlign: 'center',
    marginTop: 5,
  },
  exercisesList: {
    padding: 10,
  },
  card: {
    marginVertical: 8,
    marginHorizontal: 5,
    elevation: 3,
    borderLeftWidth: 5,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 10,
  },
  cardTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  exerciseIcon: {
    fontSize: 32,
    marginRight: 15,
  },
  cardTitleText: {
    flex: 1,
  },
  cardTitle: {
    fontSize: 18,
    marginBottom: 5,
  },
  duration: {
    fontSize: 12,
    color: '#95a5a6',
  },
  description: {
    fontSize: 14,
    color: '#666',
    marginBottom: 15,
    lineHeight: 20,
  },
  startButton: {
    borderRadius: 20,
    alignSelf: 'flex-start',
  },
  exerciseContainer: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f5f5f5',
    justifyContent: 'center',
  },
  exerciseCard: {
    elevation: 8,
    borderWidth: 2,
  },
  exerciseHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
    justifyContent: 'center',
  },
  exerciseTitle: {
    fontSize: 24,
    marginLeft: 10,
    textAlign: 'center',
  },
  progressSection: {
    marginBottom: 30,
  },
  stepCounter: {
    textAlign: 'center',
    fontSize: 16,
    marginBottom: 10,
    color: '#7f8c8d',
  },
  progressBar: {
    height: 8,
    borderRadius: 4,
  },
  instructionSection: {
    marginBottom: 30,
    alignItems: 'center',
  },
  instruction: {
    fontSize: 18,
    textAlign: 'center',
    lineHeight: 26,
    marginBottom: 15,
    color: '#2c3e50',
  },
  timeRemaining: {
    fontSize: 16,
    color: '#7f8c8d',
    textAlign: 'center',
  },
  controlButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  controlButton: {
    flex: 0.4,
  },
  tips: {
    padding: 10,
    marginTop: 10,
  },
  tipsCard: {
    elevation: 2,
  },
  tipsTitle: {
    fontSize: 18,
    marginBottom: 10,
    color: '#2c3e50',
  },
  tipsText: {
    fontSize: 14,
    lineHeight: 22,
    color: '#666',
  },
});